# Copyright 2014 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# * Neither the name of Google Inc. nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# \file version.subr
# Functions to check the version of shtk being used.


# The version of the installed shtk modules.
SHTK_VERSION="__SHTK_VERSION__"


# Checks if shtk is a minimum version.
#
# \param version Desired minimum version.
#
# \return 0 if true, 1 otherwise.
shtk_version_at_least() {
    local version="${1}"; shift

    local major_installed="$(echo "${SHTK_VERSION}" | cut -d . -f 1)"
    local major_requested="$(echo "${version}" | cut -d . -f 1)"
    if [ "${major_installed}" -lt "${major_requested}" ]; then
        return 1
    elif [ "${major_installed}" -gt "${major_requested}" ]; then
        return 0
    else
        local minor_installed="$(echo "${SHTK_VERSION}" | cut -d . -f 2)"
        local minor_requested="$(echo "${version}" | cut -d . -f 2)"
        if [ "${minor_installed}" -ge "${minor_requested}" ]; then
            return 0
        else
            return 1
        fi
    fi
}


# Checks if shtk is a maximum version.
#
# \param version Desired maximum version.
#
# \return 0 if true, 1 otherwise.
shtk_version_at_most() {
    local version="${1}"; shift

    local major_installed="$(echo "${SHTK_VERSION}" | cut -d . -f 1)"
    local major_requested="$(echo "${version}" | cut -d . -f 1)"
    if [ "${major_installed}" -lt "${major_requested}" ]; then
        return 0
    elif [ "${major_installed}" -gt "${major_requested}" ]; then
        return 1
    else
        local minor_installed="$(echo "${SHTK_VERSION}" | cut -d . -f 2)"
        local minor_requested="$(echo "${version}" | cut -d . -f 2)"
        if [ "${minor_installed}" -le "${minor_requested}" ]; then
            return 0
        else
            return 1
        fi
    fi
}


# Checks if shtk is a specific version.
#
# \param version Desired specific version.
#
# \return 0 if true, 1 otherwise.
shtk_version_is() {
    local version="${1}"; shift

    [ "${version}" = "${SHTK_VERSION}" ] || return 1
    return 0
}
