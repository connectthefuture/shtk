# Copyright 2014 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# * Neither the name of Google Inc. nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# \file unittest.subr
# Functions to implement test programs.
#
# A template of a test program that uses this module is:
#
# -----
# shtk_import unittest
#
# shtk_unittest_add_fixture clients
# clients_fixture() {
#     setup() {
#         ... initialization code shared by all tests in the fixture ...
#     }
#     teardown() {
#         ... cleanup code shared by all tests in the fixture ...
#     }
#
#     shtk_unittest_add_test add
#     add_test() {
#         ... first test in the fixture ...
#     }
#
#     shtk_unittest_add_test modify
#     modify_test() {
#         ... second test in the fixture ...
#         fail "And it fails"
#     }
# }
#
# shtk_unittest_add_test initialization
# initialization_test() {
#     ... standalone test not part of any fixture ...
#     skip "But cannot run due to some unsatisfied condition"
# }
#
# ... Either do this or, preferably, pass -mshtk_unittest_main to
# ... "shtk build" when compiling the test program and don't define main.
# main() {
#     shtk_unittest_main "${@}"
# }
# -----

shtk_import cli
shtk_import list


# Names of all the registered test cases.
#
# Upon program startup, this variable tracks all standalone test cases.
# However, when we process fixtures, this starts tracking the test cases within
# the currently-running fixture instead.
_Shtk_Unittest_TestCases=


# Names of all the registered test fixtures.
_Shtk_Unittest_TestFixtures=


# Functions to bring into the global namespace within the tests.
_Shtk_Unittest_Use="fail skip"


# Prepares for the execution of a test case.
#
# This involves bringing all the required functions into the current namespace,
# creating a work directory for the test and entering the work directory.
#
# \pre This function must be called from the subprocess used to run the test.
# \post The parent process must use _shtk_unittest_leave_test to clean up after
# execution.
#
# \param name Fully-qualified name of the test case to execute.
_shtk_unittest_enter_test() {
    local name="${1}"; shift

    shtk_cli_info "Testing ${name}..."

    for function_name in ${_Shtk_Unittest_Use}; do
        eval "${function_name}() { " \
            "shtk_unittest_${function_name} \"\${@}\"; }"
    done

    mkdir "${name}"
    cd "${name}"
}


# Cleans up after executing a test case and computes its result.
#
# \pre This function must be called from the parent process of a process that
# previously called _shtk_unittest_enter_test.
#
# \param name Fully-qualified name of the test case to clean up.
# \param exit_code Exit code of the subprocess used to run the test.
#
# \post True if the test case exited successfully; false otherwise.
_shtk_unittest_leave_test() {
    local name="${1}"; shift
    local exit_code="${1}"; shift

    local result
    if [ ${exit_code} -eq 0 ]; then
        if [ -f "${name}/result.skipped" ]; then
            result=skip
        else
            result=pass
        fi
    else
        result=fail
    fi
    rm -rf "${name}"

    case "${result}" in
        fail)
            shtk_cli_warning "Testing ${name}... FAILED"
            return 1
            ;;
        pass)
            shtk_cli_info "Testing ${name}... PASSED"
            return 0
            ;;
        skip)
            shtk_cli_warning "Testing ${name}... SKIPPED"
            return 0
            ;;
    esac
    shtk_cli_error "Failed to determine test result"
}


# Executes a test case within a fixture.
#
# \param fixture Name of the fixture containing the test case to run.
# \param basename Name of the test case to execute.
#
# \return True if the test case passes; false otherwise.
_shtk_unittest_run_fixture_test() {
    local fixture="${1}"; shift
    local basename="${1}"; shift

    local name="${fixture}__${basename}"

    shtk_list_contains "${basename}" ${_Shtk_Unittest_TestCases} \
        || shtk_cli_error "Attempting to run unregistered test case ${name}"

    (
        _shtk_unittest_enter_test "${name}"

        local failed=no
        if { setup; true; }; then
            ( "${basename}_test"; true ) || failed=yes
            { teardown; true; } || failed=yes
        else
            failed=yes
        fi
        [ "${failed}" = no ]
    )
    _shtk_unittest_leave_test "${name}" "${?}"
}


# Executes a standalone test case.
#
# \param name Name of the test case to execute.
#
# \return True if the test case passes; false otherwise.
_shtk_unittest_run_standalone_test() {
    local name="${1}"; shift

    shtk_list_contains "${name}" ${_Shtk_Unittest_TestCases} \
        || shtk_cli_error "Attempting to run unregistered test case ${name}"

    (
        _shtk_unittest_enter_test "${name}"

        "${name}_test"
        true
    )
    _shtk_unittest_leave_test "${name}" "${?}"
}


# Defines a test fixture.
#
# \param name Name of the test fixture to register.
shtk_unittest_add_fixture() {
    local name="${1}"; shift

    shtk_list_contains "${name}" ${_Shtk_Unittest_TestFixtures} \
        && shtk_cli_error "Duplicate test fixture found: ${name}"

    eval "${name}_fixture() { shtk_cli_error '${name}_fixture not defined'; }"

    _Shtk_Unittest_TestFixtures="${_Shtk_Unittest_TestFixtures} ${name}"
}


# Defines a test case.
#
# \param name Name of the test case to register.
shtk_unittest_add_test() {
    local name="${1}"; shift

    shtk_list_contains "${name}" ${_Shtk_Unittest_TestCases} \
        && shtk_cli_error "Duplicate test case found: ${name}"

    eval "${name}_test() { shtk_cli_error '${name}_test not defined'; }"

    _Shtk_Unittest_TestCases="${_Shtk_Unittest_TestCases} ${name}"
}


# Fails the test currently being run.
#
# \param ... Error message to print before failing.
shtk_unittest_fail() {
    # TODO(jmmv): Consider using ${LINENO} if available.
    shtk_cli_error "${@}"
}


# Default test program entry point to run all registered test cases.
#
# \return True if all test cases pass; false otherwise.
shtk_unittest_main() {
    [ -n "${_Shtk_Unittest_TestFixtures}" -o \
      -n "${_Shtk_Unittest_TestCases}" ] \
        || shtk_cli_error "No test cases defined; did you" \
        "call shtk_unittest_add_fixture or shtk_unittest_add_test?"

    local passed=0
    local failed=0

    for name in ${_Shtk_Unittest_TestCases}; do
        if _shtk_unittest_run_standalone_test "${name}"; then
            passed=$((${passed} + 1))
        else
            failed=$((${failed} + 1))
        fi
    done

    for fixture in ${_Shtk_Unittest_TestFixtures}; do
        _Shtk_Unittest_TestCases=

        setup() { true; }
        teardown() { true; }
        eval ${fixture}_fixture

        for name in ${_Shtk_Unittest_TestCases}; do
            if _shtk_unittest_run_fixture_test "${fixture}" "${name}"; then
                passed=$((${passed} + 1))
            else
                failed=$((${failed} + 1))
            fi
        done
    done

    local total=$((${passed} + ${failed}))
    if [ ${failed} -eq 0 ]; then
        shtk_cli_info "Ran ${total} tests; ALL PASSED"
        return 0
    else
        shtk_cli_warning "Ran ${total} tests; ${failed} FAILED"
        return 1
    fi
}


# Skips the test currently being run.
#
# \param ... Message to print before exiting.
shtk_unittest_skip() {
    # TODO(jmmv): Consider using ${LINENO} if available.
    shtk_cli_warning "${@}"
    touch result.skipped
    exit 0
}
